import java.util.ArrayList;
import java.util.Scanner;

public class TaskTracker 
{

    // Task class to represent individual tasks
    static class Task {
        int id;
        String description;
        boolean isCompleted;

        Task(int id, String description) {
            this.id = id;
            this.description = description;
            this.isCompleted = false;
        }

        @Override
        public String toString() {
            String status = isCompleted ? "[âœ“]" : "[ ]";
            return id + ". " + status + " " + description;
        }
    }

    // Main methods
    public static void main(String[] args) {
        ArrayList<Task> tasks = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        int taskIdCounter = 1;

        while (true) {
            System.out.println("\nTask Tracker Menu:");
            System.out.println("1. Add Task");
            System.out.println("2. List Tasks");
            System.out.println("3. Mark Task as Complete");
            System.out.println("4. Delete Task");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1: // Add Task
                    System.out.print("Enter the task description: ");
                    String description = scanner.nextLine();
                    tasks.add(new Task(taskIdCounter++, description));
                    System.out.println("Task added successfully!");
                    break;

                case 2: // List Tasks
                    if (tasks.isEmpty()) {
                        System.out.println("No tasks available.");
                    } else {
                        System.out.println("\nTasks:");
                        for (Task task : tasks) {
                            System.out.println(task);
                        }
                    }
                    break;

                case 3: // Mark Task as Complete
                    if (tasks.isEmpty()) {
                        System.out.println("No tasks available.");
                    } else {
                        System.out.print("Enter the task ID to mark as complete: ");
                        int completeId = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        boolean foundComplete = false;
                        for (Task task : tasks) {
                            if (task.id == completeId) {
                                task.isCompleted = true;
                                foundComplete = true;
                                System.out.println("Task marked as complete!");
                                break;
                            }
                        }
                        if (!foundComplete) {
                            System.out.println("Task not found.");
                        }
                    }
                    break;

                case 4: // Delete Task
                    if (tasks.isEmpty()) {
                        System.out.println("No tasks available.");
                    } else {
                        System.out.print("Enter the task ID to delete: ");
                        int deleteId = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        boolean foundDelete = false;
                        for (int i = 0; i < tasks.size(); i++) {
                            if (tasks.get(i).id == deleteId) {
                                tasks.remove(i);
                                foundDelete = true;
                                System.out.println("Task deleted successfully!");
                                break;
                            }
                        }
                        if (!foundDelete) {
                            System.out.println("Task not found.");
                        }
                    }
                    break;

                case 5: // Exit
                    System.out.println("Goodbye!");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
